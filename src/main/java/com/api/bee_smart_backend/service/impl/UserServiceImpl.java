package com.api.bee_smart_backend.service.impl;

import com.api.bee_smart_backend.config.MapData;
import com.api.bee_smart_backend.helper.enums.Role;
import com.api.bee_smart_backend.helper.enums.TokenType;
import com.api.bee_smart_backend.helper.exception.CustomException;
import com.api.bee_smart_backend.helper.request.CreateUserRequest;
import com.api.bee_smart_backend.helper.response.CreateUserResponse;
import com.api.bee_smart_backend.model.Token;
import com.api.bee_smart_backend.model.User;
import com.api.bee_smart_backend.repository.TokenRepository;
import com.api.bee_smart_backend.repository.UserRepository;
import com.api.bee_smart_backend.service.EmailService;
import com.api.bee_smart_backend.service.UserService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;

@Service
@Slf4j
@RequiredArgsConstructor
public class UserServiceImpl implements UserService {
    @Autowired
    private final UserRepository userRepository;
    @Autowired
    private final TokenRepository tokenRepository;
    @Autowired
    private final EmailService emailService;

    @Autowired
    private BCryptPasswordEncoder passwordEncoder;
    private final MapData mapData;

    private LocalDateTime now = LocalDateTime.now();

    @Override
    public CreateUserResponse createUser(CreateUserRequest userRequest) {
        // Check if username already exists
        Optional<User> existingUsername = userRepository.findByUsername(userRequest.getUsername());
        if (existingUsername.isPresent()) {
            throw new CustomException("Username ƒë√£ t·ªìn t·∫°i", HttpStatus.CONFLICT);
        }

        // Check if email already exists
        Optional<User> existingUserEmail = userRepository.findByEmail(userRequest.getEmail());
        if (existingUserEmail.isPresent()) {
            throw new CustomException("Email ƒë√£ t·ªìn t·∫°i", HttpStatus.CONFLICT);
        }

        // M√£ h√≥a m·∫≠t kh·∫©u
        String password = passwordEncoder.encode(userRequest.getPassword());

        // T·∫°o ƒë·ªëi t∆∞·ª£ng User
        User user = User.builder()
                .username(userRequest.getUsername())
                .email(userRequest.getEmail())
                .password(password)
                .role(Role.valueOf(userRequest.getRole()))
                .create_at(Timestamp.valueOf(now))
                .build();

        User savedUser = userRepository.save(user);

        // T·∫°o token x√°c th·ª±c
        String tokenStr = UUID.randomUUID().toString();

        Token token = Token.builder()
                .token(tokenStr)
                .tokenType(TokenType.BEARER)
                .expired(false)
                .revoked(false)
                .user(savedUser)
                .create_at(Timestamp.valueOf(now))
                .build();
        Token savedToken = tokenRepository.save(token);

        // G·ª≠i email x√°c th·ª±c v·ªõi t√™n ng∆∞·ªùi d√πng
        emailService.sendEmail(user.getEmail(), "üåü X√°c Th·ª±c Email c·ªßa B·∫°n cho Bee Smart! üåü", tokenStr, savedUser.getUsername());

        CreateUserResponse response = mapData.mapOne(savedUser, CreateUserResponse.class);
        response.setToken(savedToken.getToken());
        return response;
    }


    // Method x√°c th·ª±c email
    public String verifyEmail(String tokenStr) {
        Token token = tokenRepository.findByToken(tokenStr);
        if (token != null && !token.isExpired() && !token.isRevoked()) {
            User user = token.getUser();
            user.setEnabled(true);  // K√≠ch ho·∫°t t√†i kho·∫£n user
            userRepository.save(user);

            token.setExpired(true); // ƒê√°nh d·∫•u token ƒë√£ h·∫øt h·∫°n sau khi x√°c th·ª±c
            token.setRevoked(true);
            token.setUpdate_at(Timestamp.valueOf(now));
            token.setDelete_at(Timestamp.valueOf(now));
            tokenRepository.save(token);

            return "X√°c th·ª±c email th√†nh c√¥ng!";
        } else {
            return "Li√™n k·∫øt x√°c minh kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!";
        }
    }
}
